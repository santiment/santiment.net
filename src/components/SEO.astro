---
import { siteMetadata } from '../data/siteMetadata'
import defaultOgImage from '../assets/santiment.png'

type Props = {
  title?: string
  description?: string
  image?: string
  meta?: Record<string, string>[]
}

const {
  title: pageTitle,
  description: pageDescription,
  image = defaultOgImage,
  meta = [],
} = Astro.props

const title = pageTitle ? `${pageTitle} | ${siteMetadata.siteName}` : siteMetadata.siteName
const description = pageDescription || siteMetadata.description

const imagePath = typeof image === 'string' ? image : image.src
const imageUrl = new URL(imagePath, Astro.site).href

const canonicalUrl = new URL(Astro.url.pathname, Astro.site).href
---

<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="author" content={siteMetadata.author} />
<link rel="canonical" href={canonicalUrl} />

<meta property="og:type" content="website" />
<meta property="og:url" content={canonicalUrl} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:site_name" content={siteMetadata.title} />
<meta property="og:image" content={imageUrl} />
<meta property="og:image:secure_url" content={imageUrl} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />

<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:url" content={canonicalUrl} />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={imageUrl} />
<meta name="twitter:creator" content={siteMetadata.author} />

{meta.map((tag) => <meta {...tag} />)}
