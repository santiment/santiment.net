{"expireTime":9007200829065116000,"key":"gatsby-source-graphql-schema-SAN-san","val":"schema {\n  query: RootQueryType\n  mutation: RootMutationType\n  subscription: RootSubscriptionType\n}\n\ntype AccessLevel {\n  api: Boolean!\n  sanbase: Boolean!\n  sangraphs: Boolean!\n  spreadsheet: Boolean!\n}\n\ntype ActiveAddresses {\n  activeAddresses: Int!\n  datetime: DateTime!\n}\n\ntype ActiveDeposits {\n  activeDeposits: Int!\n  datetime: DateTime!\n}\n\ntype ActivityPoint {\n  activity: Int!\n  datetime: DateTime!\n}\n\ntype Address {\n  address: String!\n  isExchange: Boolean!\n}\n\nenum Aggregation {\n  ANY\n  AVG\n  FIRST\n  LAST\n  MAX\n  MEDIAN\n  MIN\n  SUM\n}\n\nenum AnomaliesMetricsEnum {\n  DAILY_ACTIVE_ADDRESSES\n  DEV_ACTIVITY\n  SOCIAL_VOLUME\n}\n\n\"\"\"\nField `metricValue` is the value from original metric that is considered abnormal.\n\n\"\"\"\ntype AnomalyValue {\n  datetime: DateTime!\n  metricValue: Float\n}\n\ntype ApiCallData {\n  apiCallsCount: Int!\n  datetime: DateTime!\n}\n\nenum BillingStatus {\n  ACTIVE\n  CANCELED\n  INCOMPLETE\n  INCOMPLETE_EXPIRED\n  INITIAL\n  PAST_DUE\n  TRIALING\n  UNPAID\n}\n\ntype BurnRateData {\n  burnRate: Float\n  datetime: DateTime!\n}\n\ntype ChartData {\n  datetime: DateTime!\n  mentionsCount: Int\n}\n\nenum ColorEnum {\n  BLACK\n  BLUE\n  GREEN\n  GREY\n  NONE\n  RED\n  YELLOW\n}\n\ntype CombinedProjectsStats {\n  datetime: DateTime!\n  marketcap: Float\n  volume: Float\n}\n\ntype Coupon {\n  amountOff: Float\n  id: String\n  isValid: Boolean\n  name: String\n  percentOff: Float\n}\n\ntype CurrencyAmount {\n  amount: Float\n  currencyCode: String\n}\n\ntype Cursor {\n  after: DateTime\n  before: DateTime\n}\n\ninput CursorInput {\n  datetime: DateTime!\n  type: CursorType!\n}\n\nenum CursorType {\n  AFTER\n  BEFORE\n}\n\n\"\"\"\nThe `DateTime` scalar type represents a date and time in the UTC\ntimezone. The DateTime appears in a JSON response as an ISO8601 formatted\nstring, including UTC timezone (\"Z\"). The parsed date and time string will\nbe converted to UTC and any UTC offset other than 0 will be rejected.\n\"\"\"\nscalar DateTime\n\n\"\"\"\nThe `Decimal` scalar type represents signed double-precision fractional\nvalues parsed by the `Decimal` library.  The Decimal appears in a JSON\nresponse as a string to preserve precision.\n\"\"\"\nscalar Decimal\n\nscalar EctoDate\n\ntype ElasticsearchStats {\n  averageDocumentsPerDay: Int!\n  discordChannelsCount: Int!\n  documentsCount: Int!\n  sizeInMegabytes: Int!\n  subredditsCount: Int!\n  telegramChannelsCount: Int!\n}\n\ntype EmailLoginRequest {\n  firstLogin: Boolean\n  success: Boolean!\n}\n\ntype EmojisSentiment {\n  datetime: DateTime!\n  sentiment: Float\n}\n\n\"\"\"\nA type describing an Ethereum address. Beside the address itself it returns\nthe SAN balance of that address.\n\n\"\"\"\ntype EthAccount {\n  address: String!\n  sanBalance: Int!\n}\n\ntype EthAddress {\n  address: String!\n  balance: Float\n}\n\ntype EthSpentData {\n  datetime: DateTime!\n  ethSpent: Float\n}\n\ntype ExchangeFundsFlow {\n  datetime: DateTime!\n  inOutDifference: Float!\n}\n\ntype ExchangeMarketDepth {\n  asks05PercentDepth: Float\n  bids05PercentVolume: Float\n  asks2PercentVolume: Float\n  bids5PercentVolume: Float\n  bids075PercentVolume: Float\n  asks025PercentDepth: Float\n  bids20PercentDepth: Float\n  asks025PercentVolume: Float\n  bids20PercentVolume: Float\n  bid: Float\n  source: String\n  bids1PercentDepth: Float\n  asks075PercentVolume: Float\n  bids2PercentDepth: Float\n  asks5PercentVolume: Float\n  bids5PercentDepth: Float\n  asks30PercentVolume: Float\n  bids10PercentDepth: Float\n  symbol: String\n  bids2PercentVolume: Float\n  asks5PercentDepth: Float\n  bids05PercentDepth: Float\n  bids075PercentDepth: Float\n  bids025PercentVolume: Float\n  timestamp: DateTime\n  asks20PercentVolume: Float\n  bids1PercentVolume: Float\n  asks1PercentDepth: Float\n  bids30PercentDepth: Float\n  asks20PercentDepth: Float\n  asks10PercentDepth: Float\n  bids025PercentDepth: Float\n  asks10PercentVolume: Float\n  bids10PercentVolume: Float\n  asks075PercentDepth: Float\n  asks2PercentDepth: Float\n  asks1PercentVolume: Float\n  asks30PercentDepth: Float\n  asks05PercentVolume: Float\n  ask: Float\n  bids30PercentVolume: Float\n}\n\ntype ExchangeTrade {\n  amount: Float\n  cost: Float\n  price: Float\n  side: SideEnum\n  source: String\n  symbol: String\n  timestamp: DateTime\n}\n\ntype ExchangeVolume {\n  datetime: DateTime!\n  exchangeInflow: Float\n  exchangeOutflow: Float\n}\n\ntype FollowerData {\n  count: Int!\n  users: [PublicUser]!\n}\n\ntype GasUsed {\n  datetime: DateTime!\n  ethGasUsed: Int @deprecated(reason: \"Use gasUsed\")\n  gasUsed: Int\n}\n\ninput GithubOrganizationsSelector {\n  marketSegments: [String]\n  organizations: [String]\n  slug: String\n}\n\ntype HistoricalBalance {\n  balance: Float\n  datetime: DateTime!\n}\n\ntype Ico {\n  capCurrency: String\n  comments: String\n  contractAbi: String\n  contractBlockNumber: Int\n  endDate: EctoDate\n  fundsRaised: [CurrencyAmount]\n  fundsRaisedBtcIcoEndPrice: Float\n  fundsRaisedEthIcoEndPrice: Float\n  fundsRaisedUsdIcoEndPrice: Float\n  id: ID!\n  maximalCapAmount: Decimal\n  minimalCapAmount: Decimal\n  startDate: EctoDate\n  tokenBtcIcoPrice: Decimal\n  tokenEthIcoPrice: Decimal\n  tokenUsdIcoPrice: Decimal\n  tokensIssuedAtIco: Decimal\n  tokensSoldAtIco: Decimal\n}\n\ntype ImageData {\n  contentHash: String\n  error: String\n  fileName: String\n  hashAlgorithm: String\n  imageUrl: String\n}\n\ntype Infrastructure {\n  code: String!\n  id: Int!\n}\n\ninput InputListItem {\n  projectId: Int\n}\n\n\"\"\"\nThe `interval` scalar type represents arbitrary time range interval,\nrepresented as UTF-8 character sequences (string). The interval starts\nwith a number and ends with one of the following suffixes:\n- s - represents second\n- m - represents minute\n- h - represents hour\n- d - represents day\n- w - represents week\n\nThere is no predefined suffix for a month due to not fixed number of days\na month can have.\n\nExamples for valid intervals:\n- 5m - 5 minutes\n- 12h - 12 hours\n- 1d - 1 day\n- 30d - 30 days\n- 2w - 2 weeks\n\"\"\"\nscalar interval\n\n\"\"\"\nThe `json` scalar type represents arbitrary json string data, represented as UTF-8\ncharacter sequences. The json type is most often used to represent a free-form\nhuman-readable json string.\n\"\"\"\nscalar json\n\ntype ListItem {\n  project: Project\n}\n\ntype Login {\n  token: String!\n  user: User!\n}\n\ntype Logout {\n  success: Boolean!\n}\n\ntype MarketSegment {\n  count: Int\n  name: String\n}\n\ntype Messages {\n  datetime: DateTime!\n  text: String\n}\n\ntype Metadata {\n  \"\"\"\n  The supported aggregations for this metric. For more information about\n  aggregations see the documentation for `defaultAggregation`\n  \n  \"\"\"\n  availableAggregations: [Aggregation]\n\n  \"\"\"\n  List of slugs which can be provided to the `timeseriesData` field to fetch\n  the metric.\n  \n  \"\"\"\n  availableSlugs: [String]\n\n  \"\"\"\n  When the interval provided in the query is bigger than `min_interval` and\n  contains two or more data points, the data must be aggregated into a single\n  data point. The default aggregation that is applied is this `default_aggregation`.\n  The default aggregation can be changed by the `aggregation` parameter of\n  the `timeseriesData` field. Available aggregations are:\n  [\n  SUM,ANY,AVG,MIN,MAX,LAST,FIRST,MEDIAN\n  ]\n  \n  \"\"\"\n  defaultAggregation: Aggregation\n\n  \"\"\"\n  The minimal granularity for which the data is available.\n  \n  \"\"\"\n  minInterval: String\n}\n\ntype Metric {\n  availableSince(slug: String!): DateTime\n  metadata: Metadata\n\n  \"\"\"\n  Return a list of 'datetime' and 'value' for a given metric, slug\n  and time period.\n  \n  \"\"\"\n  timeseriesData(aggregation: Aggregation, from: DateTime!, interval: interval = \"1d\", slug: String!, to: DateTime!): [MetricData]\n}\n\ntype MetricData {\n  datetime: DateTime!\n  value: Float!\n}\n\ntype MinersBalance {\n  balance: Float\n  datetime: DateTime!\n}\n\ntype MiningPoolsDistribution {\n  datetime: DateTime!\n  other: Float\n  top10: Float\n  top3: Float\n}\n\ntype MvrvRatio {\n  datetime: DateTime!\n  ratio: Float\n}\n\n\"\"\"\nThe `Naive DateTime` scalar type represents a naive date and time without\ntimezone. The DateTime appears in a JSON response as an ISO8601 formatted\nstring.\n\"\"\"\nscalar NaiveDateTime\n\ntype NetworkGrowth {\n  datetime: DateTime!\n  newAddresses: Int\n}\n\ntype News {\n  datetime: DateTime!\n  description: String\n  mediaUrl: String\n  sourceName: String\n  title: String!\n  url: String\n}\n\nenum NewsletterSubscriptionType {\n  DAILY\n  OFF\n  WEEKLY\n}\n\ntype NvtRatio {\n  datetime: DateTime!\n  nvtRatioCirculation: Float\n  nvtRatioTxVolume: Float\n}\n\ntype Ohlc {\n  closePriceUsd: Float\n  datetime: DateTime!\n  highPriceUsd: Float\n  lowPriceUsd: Float\n  openPriceUsd: Float\n}\n\ntype Payments {\n  amount: Int\n  createdAt: DateTime\n  description: String\n  receiptUrl: String\n  status: String\n}\n\ntype PercentOfTokenSupplyOnExchanges {\n  datetime: DateTime!\n  percentOnExchanges: Float\n}\n\ntype Plan {\n  amount: Int\n  id: ID\n  interval: interval\n  name: String\n  product: Product\n}\n\ntype Post {\n  createdAt: DateTime!\n  discourseTopicUrl: String\n  id: ID!\n  images: [ImageData]\n  link: String\n  moderationComment: String\n  publishedAt: DateTime\n  readyState: String\n  relatedProjects: [Project]\n  shortDesc: String\n  state: String\n  tags: [Tag]\n  text: String\n  title: String!\n  updatedAt: DateTime!\n  user: PostAuthor!\n  votedAt: DateTime\n  votes: Vote\n}\n\ntype PostAuthor {\n  id: ID!\n  username: String\n}\n\ntype PricePoint {\n  datetime: DateTime!\n  marketcap: Float\n  priceBtc: Float\n  priceUsd: Float\n  ticker: String\n  volume: Float\n}\n\ntype PriceVolumeDiff {\n  datetime: DateTime!\n  priceChange: Float\n  priceVolumeDiff: Float\n  volumeChange: Float\n}\n\ntype Product {\n  id: ID\n  name: String\n  plans: [Plan]\n}\n\n\"\"\"\nA type fully describing a project.\n\n\"\"\"\ntype Project {\n  \"\"\"Average dev activity for the last `days` days\"\"\"\n  averageDevActivity(days: Int = 30): Float\n  volumeUsd: Float\n  projectTransparencyDescription: String\n  priceBtc: Float\n\n  \"\"\"\n  Average daily active addresses for a ERC20 project or Ethereum and given time period\n  \"\"\"\n  averageDailyActiveAddresses(from: DateTime, to: DateTime): Int\n  roiUsd: Decimal\n  fundsRaisedIcos: [CurrencyAmount]\n  fundsRaisedBtcIcoEndPrice: Float\n  ticker: String\n  ethAddresses: [EthAddress]\n\n  \"\"\"Top transactions for the token of a given project\"\"\"\n  tokenTopTransactions(from: DateTime!, limit: Int = 10, to: DateTime!): [Transaction]\n  description: String\n  percentChange7d: Decimal\n  icoPrice: Float\n  coinmarketcapId: String\n  email: String\n  twitterData: TwitterData\n  slug: String\n  fundsRaisedUsdIcoEndPrice: Float\n  linkedinLink: String\n  rank: Int\n  relatedPosts: [Post]\n  availableSupply: Decimal\n  bttLink: String\n  infrastructure: String\n\n  \"\"\"Average github activity for the last `days` days\"\"\"\n  averageGithubActivity(days: Int = 30): Float\n  projectTransparency: Boolean\n  initialIco: Ico\n  isTrending: Boolean\n  volumeChange24h: Float\n  icos: [Ico]\n  marketSegments: [String]\n\n  \"\"\"Total ETH spent from the project's team wallets for the last `days`\"\"\"\n  ethSpent(days: Int = 30): Float\n  name: String!\n  slackLink: String\n  redditLink: String\n\n  \"\"\"\n  Returns a list of GraphQL queries that have data for the given slug.\n  \n  For example, any of the queries returned from the query:\n  ```\n  {\n    projectBySlug(slug: \"ethereum\"){ availableQueries }\n  }\n  ```\n  can be executed with \"ethereum\" slug as parameter and it will have data.\n  `devActivity` query will be part of the result if that project has a known\n  github link. So the following query will have data:\n  ```\n  {\n    devActivity(\n      slug: \"ethereum\"\n      from: \"2019-01-01T00:00:00Z\"\n      to: \"2019-02-01T00:00:00Z\"\n      interval: \"1d\"){\n        datetime\n        activity\n      }\n  }\n  ```\n  \n  \"\"\"\n  availableQueries: [String]\n  totalSupply: Decimal\n  longDescription: String\n  sourceSlugMappings: [SourceSlugMapping]\n  telegramLink: String\n  symbol: String\n  percentChange24h: Decimal\n  ethBalance: Float\n  githubLinks: [String]\n  teamTokenWallet: String\n  websiteLink: String\n  githubLink: String\n  priceUsd: Float\n  priceToBookRatio: Float\n  socialVolumeQuery: String\n  marketSegment: String\n  logoUrl: String\n\n  \"\"\"\n  ETH spent for each `interval` from the project's team wallet and time period\n  \"\"\"\n  ethSpentOverTime(from: DateTime!, interval: interval = \"1d\", to: DateTime!): [EthSpentData]\n  twitterLink: String\n  projectTransparencyStatus: String\n  mainContractAddress: String\n  blogLink: String\n  fundsRaisedEthIcoEndPrice: Float\n  tokenDecimals: Int\n  tokenAddress: String\n  percentChange1h: Decimal\n  id: ID!\n  usdBalance: Float\n  marketcapUsd: Float\n  facebookLink: String\n\n  \"\"\"\n  Returns a list of available metrics. Every one of the metrics in the list\n  can be passed as the `metric` argument of the `getMetric` query.\n  \n  For example, any of of the metrics from the query:\n  ```\n  {\n    projectBySlug(slug: \"ethereum\"){ availableMetrics }\n  }\n  ```\n  can be used like this:\n  ```\n  {\n    getMetric(metric: \"<metric>\"){\n      timeseriesData(\n        slug: \"ethereum\"\n        from: \"2019-01-01T00:00:00Z\"\n        to: \"2019-02-01T00:00:00Z\"\n        interval: \"1d\"){\n          datetime\n          value\n        }\n    }\n  ```\n  \n  \"\"\"\n  availableMetrics: [String]\n\n  \"\"\"Top ETH transactions for project's team wallets\"\"\"\n  ethTopTransactions(from: DateTime!, limit: Int = 10, to: DateTime!, transactionType: TransactionType = ALL): [Transaction]\n  btcBalance: Float\n  whitepaperLink: String\n}\n\ntype ProjectsChange {\n  change: Float!\n  slug: String!\n  status: SocialGainersLosersStatusEnum\n}\n\ntype ProjectsCount {\n  currencyProjectsCount: Int!\n  erc20ProjectsCount: Int!\n  projectsCount: Int!\n}\n\ntype ProjectStats {\n  marketcap: Float\n  marketcapPercent: Float\n  slug: String\n  volume: Float\n}\n\nenum PromoEmailLangEnum {\n  EN\n  JP\n}\n\ntype PublicUser {\n  avatarUrl: String\n  email: String\n  followers: FollowerData\n  following: FollowerData\n  id: ID!\n  insights: [Post]\n  triggers: [Trigger]\n  username: String\n  watchlists: [UserList]\n}\n\ntype RealizedValue {\n  datetime: DateTime!\n  nonExchangeRealizedValue: Int\n  realizedValue: Int\n}\n\ntype RootMutationType {\n  \"\"\"\n  Request cancelling a subscription. Subscription won't be deactivated immediately but\n  will be active until the current subscription period ends.\n  \n  \"\"\"\n  cancelSubscription(subscriptionId: Int!): SubscriptionCancellation\n\n  \"\"\"\n  Delete an insight. The insight must be owned by the user currently logged in.\n  \"\"\"\n  deleteInsight(id: ID!): Post\n  updateWatchlistSettings(id: Int!, settings: WatchlistSettingsInputObject!): WatchlistSettings\n\n  \"\"\"\n  Remove your vote for an insight. The user must logged in.\n  \n  \"\"\"\n  unvote(insightId: Int, postId: Int): Post\n\n  \"\"\"\n  Generates a new apikey. There could be more than one apikey per user at every\n  given time. Only JWT authenticated users can generate apikeys. The apikeys can\n   be retrieved via the `apikeys` fields of the `user` GQL type.\n  \n  \"\"\"\n  generateApikey: User\n\n  \"\"\"\n  Subscribe logged in user to a chosen plan.\n  Some plans have free trial and doesn't need credit card.\n    * `card_token` is an id returned by Stripe upon filling card information.\n    * `coupon` is coupon code id giving some percentage off on the price.\n  \n  \"\"\"\n  subscribe(cardToken: String, coupon: String, planId: Int!): SubscriptionPlan\n  logout: Logout\n\n  \"\"\"Delete a post. The post must be owned by the user currently logged in.\"\"\"\n  deletePost(id: ID!): Post @deprecated(reason: \"Use `deleteInsight` instead\")\n\n  \"\"\"\n  Publish insight. The `id` argument must be an id of an already existing insight.\n  Once published, the insight is visible to anyone and can no longer be edited.\n  \n  \"\"\"\n  publishInsight(id: ID!): Post\n\n  \"\"\"\n  Vote for an insight. The user must logged in.\n  \n  \"\"\"\n  vote(insightId: Int, postId: Int): Post\n\n  \"\"\"Remove a watchlist.\"\"\"\n  removeWatchlist(id: Int!): UserList\n\n  \"\"\"\n  Initiate the email change process. This mutation will send an email that contains\n  a link that needs to be followed to complete the email change.\n  \n  \"\"\"\n  changeEmail(email: String!): EmailLoginRequest\n\n  \"\"\"\n  Create signal trigger described by `trigger` json field.\n  Returns the newly created trigger.\n  \n  \"\"\"\n  createTrigger(cooldown: String, description: String, iconUrl: String, isActive: Boolean, isPublic: Boolean, isRepeating: Boolean, settings: json!, tags: [String], title: String!): UserTrigger\n\n  \"\"\"\n  Request subscription for renewal. Subscription that is cancelled but has not reached\n  end of the current period can be renewed.\n  \n  \"\"\"\n  renewCancelledSubscription(subscriptionId: Int!): SubscriptionPlan\n\n  \"\"\"\n  Add the given `address` for the currently logged in user. The `signature` and\n  `message_hash` are passed to the `web3.eth.accounts.recover` function to recover\n  the Ethereum address. If it is the same as the passed in the argument then the\n  user has access to this address and has indeed signed the message\n  \n  \"\"\"\n  addUserEthAddress(address: String!, messageHash: String!, signature: String!): User\n\n  \"\"\"\n  Update a watchlist\n  \n  \"\"\"\n  updateWatchlist(color: ColorEnum, function: json, id: Int!, isMonitored: Boolean, isPublic: Boolean, listItems: [InputListItem], name: String): UserList\n\n  \"\"\"\n  Update a post if and only if the currently logged in user is the creator of the post\n  A post can be updated if it is not yet published.\n  \n  \"\"\"\n  updatePost(id: ID!, imageUrls: [String], link: String, shortDesc: String, tags: [String], text: String, title: String): Post @deprecated(reason: \"Use `updateInsight` instead\")\n\n  \"\"\"Remove user favourites list.\"\"\"\n  removeUserList(id: Int!): UserList\n\n  \"\"\"Upload a list of images and return their URLs.\"\"\"\n  uploadImage(images: [Upload]): [ImageData]\n\n  \"\"\"Change subscription to Santiment newsletter\"\"\"\n  changeNewsletterSubscription(newsletterSubscription: NewsletterSubscriptionType): UserSettings\n\n  \"\"\"\n  Verifies the email login. This mutation does the actual login.\n  \n  \"\"\"\n  emailLoginVerify(email: String!, token: String!): Login\n\n  \"\"\"Allow/Dissallow to receive notifications in email/telegram channel\"\"\"\n  settingsToggleChannel(signalNotifyEmail: Boolean, signalNotifyTelegram: Boolean): UserSettings\n\n  \"\"\"\n  Update an insight if and only if the currently logged in user is the creator of the insight\n  An insight can be updated if it is not yet published.\n  \n  \"\"\"\n  updateInsight(id: ID!, imageUrls: [String], link: String, shortDesc: String, tags: [String], text: String, title: String): Post\n  changeUsername(username: String!): User\n\n  \"\"\"\n  Request a discount code for all sanbase products.\n  \n  \"\"\"\n  sendPromoCoupon(email: String!, lang: PromoEmailLangEnum, message: String): SendCouponSuccess\n\n  \"\"\"Change the user's avatar.\"\"\"\n  changeAvatar(avatarUrl: String!): User\n\n  \"\"\"\n  Upgrade/Downgrade a subscription to another plan using existing card information.\n  \n  \"\"\"\n  updateSubscription(planId: Int!, subscriptionId: Int!): SubscriptionPlan\n  createPromoSubscription(couponCode: String!): [SubscriptionPlan]\n\n  \"\"\"\n  Revoke the given apikey if only the currently logged in user is the owner of the\n  apikey. Only JWT authenticated users can revoke apikeys. You cannot revoke the apikey\n  using the apikey.\n  \n  \"\"\"\n  revokeApikey(apikey: String!): User\n\n  \"\"\"\n  Update user favourites list.\n  \n  \"\"\"\n  updateUserList(color: ColorEnum, function: json, id: Int!, isMonitored: Boolean, isPublic: Boolean, listItems: [InputListItem], name: String): UserList @deprecated(reason: \"Use `updateWatchlist` instead\")\n\n  \"\"\"Follow a chosen user\"\"\"\n  follow(userId: ID!): User\n\n  \"\"\"\n  Create user favourites list.\n  \n  \"\"\"\n  createUserList(color: ColorEnum, function: json, isPublic: Boolean, name: String!): UserList @deprecated(reason: \"Use `createWatchlist` instead\")\n\n  \"\"\"\n  Update the terms and condition the user accepts. The `accept_privacy_policy`\n  must be accepted (must equal `true`) in order for the account to be considered\n  activated.\n  \n  \"\"\"\n  updateTermsAndConditions(marketingAccepted: Boolean, privacyPolicyAccepted: Boolean): User\n  updateUserSettings(settings: UserSettingsInputObject): UserSettings\n\n  \"\"\"\n  Update signal trigger by its id.\n  Returns the updated trigger.\n  \n  \"\"\"\n  updateTrigger(cooldown: String, description: String, iconUrl: String, id: Int!, isActive: Boolean, isPublic: Boolean, isRepeating: Boolean, settings: json, tags: [String], title: String): UserTrigger\n\n  \"\"\"\n  Remove the given `address` for the currently logged in user. This can only be done\n  if this `address` is not the only mean for the user to log in. It can be removed\n  only if there is an email set or there is another ethereum address added.\n  \n  \"\"\"\n  removeUserEthAddress(address: String!): User\n\n  \"\"\"\n  Revoke the telegram deep link for the currently logged in user if present.\n  The link will continue to work and following it will send a request to sanbase,\n  but the used token will no longer be paired with the user.\n  \n  \"\"\"\n  revokeTelegramDeepLink: Boolean\n\n  \"\"\"\n  Initiate email login. An email with a link that needs to be followed is sent\n  to the given email.\n  \n  \"\"\"\n  emailLogin(consent: String, email: String!, username: String): EmailLoginRequest\n\n  \"\"\"\n  Create a watchlist.\n  \n  \"\"\"\n  createWatchlist(color: ColorEnum, function: json, isPublic: Boolean, name: String!): UserList\n\n  \"\"\"\n  Create a post. After creation the post is not visible to anyone but the author.\n  To be visible to anyone, the post must be published. By publishing it also becomes\n  immutable and can no longer be updated.\n  \n  \"\"\"\n  createPost(imageUrls: [String], link: String, shortDesc: String, tags: [String], text: String, title: String!): Post @deprecated(reason: \"Use `createInsight` instead\")\n\n  \"\"\"\n  Create an insight. After creation the insight is not visible to anyone but the author.\n  To be visible to anyone, the insight must be published. By publishing it also becomes\n  immutable and can no longer be updated.\n  \n  \"\"\"\n  createInsight(imageUrls: [String], link: String, shortDesc: String, tags: [String], text: String, title: String!): Post\n\n  \"\"\"\n  Remove signal trigger by its id.\n  Returns the removed trigger on success.\n  \n  \"\"\"\n  removeTrigger(id: Int!): UserTrigger\n\n  \"\"\"\n  Verifies that the email change is valid. This mutation does the actual email change.\n  \n  \"\"\"\n  emailChangeVerify(emailCandidate: String!, token: String!): Login\n  ethLogin(address: String!, messageHash: String!, signature: String!): Login\n\n  \"\"\"Unfollow a chosen user\"\"\"\n  unfollow(userId: ID!): User\n}\n\ntype RootQueryType {\n  \"\"\"Fetch all projects that have price data.\"\"\"\n  allProjects(minVolume: Int, page: Int, pageSize: Int): [Project]\n\n  \"\"\"\n  Return a list of assets that a wallet currently holds.\n  \n  \"\"\"\n  assetsHeldByAddress(address: String!): [SlugBalance]\n\n  \"\"\"\n  Historical balance for erc20 token or eth address.\n  Returns the historical balance for a given address in the given interval.\n  \n  \"\"\"\n  historicalBalance(address: String!, from: DateTime!, interval: interval! = \"1d\", slug: String!, to: DateTime!): [HistoricalBalance]\n  timelineEvents(cursor: CursorInput, limit: Int = 25): [TimelineEventsPaginated]\n\n  \"\"\"\n  Fetch the emoji sentiment for a given ticker and time period.\n  This metric is a basic sentiment analysis, based on emojis used in social media.\n  \n  \"\"\"\n  emojisSentiment(from: DateTime!, interval: interval = \"1d\", resultSizeTail: Int = 0, to: DateTime!): [EmojisSentiment]\n\n  \"\"\"Fetch ERC20 projects' market segments.\"\"\"\n  erc20MarketSegments: [MarketSegment]\n\n  \"\"\"\n  Fetch data for each of the projects in the slugs lists\n  \n  \"\"\"\n  projectsListStats(from: DateTime!, slugs: [String]!, to: DateTime!): [ProjectStats]\n\n  \"\"\"Returns what percent of token supply is on exchanges\"\"\"\n  percentOfTokenSupplyOnExchanges(from: DateTime!, interval: interval = \"1d\", slug: String!, to: DateTime!): [PercentOfTokenSupplyOnExchanges]\n\n  \"\"\"\n  Fetch daily active addresses for a project within a given time period.\n  Projects are referred to by a unique identifier (slug).\n  \n  This metric includes the number of unique addresses that participated in\n  the transfers of given token during the day.\n  \n  Grouping by interval works by taking the mean of all daily active address\n  records in the interval. The default value of the interval is 1 day, which yields\n  the exact number of unique addresses for each day.\n  \n  \"\"\"\n  dailyActiveAddresses(from: DateTime!, interval: interval = \"1d\", slug: String!, to: DateTime!): [ActiveAddresses] @deprecated(reason: \"Use getMetric(metric: \\\"daily_active_addresses\\\") instead\")\n  featuredInsights: [Post]\n\n  \"\"\"\n  Fetch the post with the given ID.\n  The user must be logged in to access all fields for the post/insight.\n  \n  \"\"\"\n  post(id: Int!): Post @deprecated(reason: \"Use `insight` instead\")\n\n  \"\"\"\n  Returns a list of slugs for which there is social volume data.\n  \n  \"\"\"\n  socialVolumeProjects: [String]\n\n  \"\"\"Fetch all public watchlists for current_user.\"\"\"\n  fetchPublicWatchlists: [UserList]\n  allProjectsByFunction(function: json): [Project]\n\n  \"\"\"Fetch a list of all posts for which a user has voted.\"\"\"\n  allInsightsUserVoted(userId: Int!): [Post]\n\n  \"\"\"\n  Returns the top holders' percent of total supply - in exchanges, outside exchanges and combined.\n  \n  Arguments description:\n  * slug - a string uniquely identifying a project\n  * number_of_holders - take top `number_of_holders` into account when calculating.\n  * from - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n  * to - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n  \n  \"\"\"\n  topHoldersPercentOfTotalSupply(from: DateTime!, interval: interval = \"1d\", numberOfHolders: Int!, slug: String!, to: DateTime!): [TopHoldersPercentOfTotalSupply]\n\n  \"\"\"\n  Returns a list of mentions count for a given project and time interval.\n  \n  Arguments description:\n    * slug - a string uniquely identifying a project\n    * interval - an integer followed by one of: `m`, `h`, `d`, `w`\n    * from - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n    * to - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n    * socialVolumeType - the source of mention counts, one of the following:\n      1. \"PROFESSIONAL_TRADERS_CHAT_OVERVIEW\" - shows how many times the given\n  project has been mentioned in the professional traders chat\n      2. \"TELEGRAM_CHATS_OVERVIEW\" - shows how many times the given project has\n  been mentioned across all telegram chats, except the project's own community\n  chat (if there is one)\n      3. \"TELEGRAM_DISCUSSION_OVERVIEW\" - the general volume of messages in the project's community chat (if there is one)\n      4. \"DISCORD_DISCUSSION_OVERVIEW\" - shows how many times the given project has been mentioned in the discord channels\n  \n  \"\"\"\n  socialVolume(from: DateTime!, interval: interval! = \"1d\", slug: String!, socialVolumeType: SocialVolumeType!, to: DateTime!): [SocialVolume]\n\n  \"\"\"\n  Get current user's history of executed signals with cursor pagination.\n  * `cursor` argument is an object with: type `BEFORE` or `AFTER` and `datetime`.\n    - `type: BEFORE` gives those executed before certain datetime\n    - `type: AFTER` gives those executed after certain datetime\n  * `limit` argument defines the size of the page. Default value is 25\n  \n  \"\"\"\n  signalsHistoricalActivity(cursor: CursorInput, limit: Int = 25): SignalHistoricalActivityPaginated\n\n  \"\"\"Get public signal triggers by user_id\"\"\"\n  publicTriggersForUser(userId: ID!): [UserTrigger]\n\n  \"\"\"List all exchanges\"\"\"\n  allExchanges(slug: String = \"ethereum\"): [String]\n\n  \"\"\"\n  Returns distribution of miners between mining pools.\n  What part of the miners are using top3, top10 and all the other pools.\n  Currently only ETH is supported.\n  \n  \"\"\"\n  miningPoolsDistribution(from: DateTime!, interval: interval = \"1d\", slug: String!, to: DateTime!): [MiningPoolsDistribution]\n\n  \"\"\"\n  Returns lists with the mentions of the search phrase from the selected source.\n  The results are in two formats - the messages themselves and the data for\n  building graph representation of the result.\n  \n  Arguments description:\n    * source - one of the following:\n      1. TELEGRAM\n      2. PROFESSIONAL_TRADERS_CHAT\n      3. REDDIT\n      4. DISCORD\n    * searchText - a string containing the key words for which the sources should be searched.\n    * interval - an integer followed by one of: `m`, `h`, `d`, `w`\n    * from - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n    * to - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n  \n  \"\"\"\n  topicSearch(from: DateTime!, interval: interval! = \"1d\", searchText: String!, source: TopicSearchSources!, to: DateTime): TopicSearch\n\n  \"\"\"\n  Fetch ETH spent by all projects within a given time period and interval.\n  This query returns a list of values where each value is of length `interval`.\n  \n  \"\"\"\n  ethSpentOverTimeByErc20Projects(from: DateTime!, interval: interval = \"1d\", to: DateTime!): [EthSpentData]\n\n  \"\"\"Fetch all public favourites lists\"\"\"\n  fetchAllPublicUserLists: [UserList] @deprecated(reason: \"Use `fetchAllPublicWatchlists` instead\")\n\n  \"\"\"\n  Fetch the current data for a Twitter account (currently includes only Twitter followers).\n  \"\"\"\n  twitterData(slug: String, ticker: String): TwitterData\n\n  \"\"\"\n  Fetch the flow of funds into and out of an exchange wallet.\n  This query returns the difference IN-OUT calculated for each interval.\n  \n  \"\"\"\n  exchangeFundsFlow(from: DateTime!, interval: interval = \"1d\", slug: String!, to: DateTime!): [ExchangeFundsFlow] @deprecated(reason: \"Use getMetric(metric: \\\"exchange_balance\\\") instead\")\n\n  \"\"\"\n  Fetch ETH spent by all projects within a given time period and interval.\n  This query returns a list of values where each value is of length `interval`.\n  \n  \"\"\"\n  ethSpentOverTimeByAllProjects(from: DateTime!, interval: interval = \"1d\", to: DateTime!): [EthSpentData]\n\n  \"\"\"Get all public signal triggers\"\"\"\n  allPublicTriggers: [UserTrigger]\n\n  \"\"\"\n  Returns lists with trending words and their corresponding trend score.\n  \n  * from - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n  * to - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n  * interval - a string representing at what interval the words are returned\n  * size - an integer showing how many words should be included in the top list (max 30)\n  \n  \"\"\"\n  getTrendingWords(from: DateTime!, interval: interval = \"1d\", size: Int!, to: DateTime!): [TrendingWords]\n\n  \"\"\"Fetch all public favourites lists for current_user.\"\"\"\n  fetchPublicUserLists: [UserList] @deprecated(reason: \"Use `fetchPublicWatchlists` instead\")\n\n  \"\"\"\n  Fetch token circulation for a project, grouped by interval.\n  Projects are referred to by a unique identifier (slug).\n  \n  \"\"\"\n  tokenCirculation(\n    from: DateTime!\n\n    \"\"\"The interval should represent whole days, i.e. `1d`, `48h`, `1w`, etc.\"\"\"\n    interval: interval = \"1d\"\n    slug: String!\n    to: DateTime!\n  ): [TokenCirculation] @deprecated(reason: \"Use getMetric(metric: \\\"circulation_1d\\\") instead\")\n  getAvailableSlugs: [String]\n\n  \"\"\"Get signal trigger by its id\"\"\"\n  getTriggerById(id: Int!): UserTrigger\n  watchlist(id: ID!): UserList\n\n  \"\"\"\n  Fetch all currency projects. A currency project is a project that has price data but is not classified as ERC20.\n  \"\"\"\n  allCurrencyProjects(minVolume: Int, page: Int, pageSize: Int): [Project]\n\n  \"\"\"Fetch the ETH spent by all projects within a given time period.\"\"\"\n  ethSpentByAllProjects(from: DateTime!, to: DateTime!): Float\n\n  \"\"\"Fetch the Twitter mention count for a given ticker and time period.\"\"\"\n  twitterMentionCount(from: DateTime!, interval: interval = \"1d\", resultSizeTail: Int = 0, ticker: String!, to: DateTime!): [TwitterMentionCount]\n\n  \"\"\"\n  Returns the historical score for a given word within a time interval\n  \n  Arguments description:\n    * word - the word the historical score is requested for\n    * source - one of the following:\n      1. TELEGRAM\n      2. PROFESSIONAL_TRADERS_CHAT\n      3. REDDIT\n      4. ALL\n    * from - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n    * to - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n  \n  \"\"\"\n  wordTrendScore(from: DateTime!, source: TrendingWordsSources!, to: DateTime!, word: String!): [WordTrendScore]\n\n  \"\"\"\n  Network growth returns the newly created addresses for a project in a given timeframe\n  \"\"\"\n  networkGrowth(from: DateTime!, interval: interval! = \"1d\", slug: String!, to: DateTime!): [NetworkGrowth] @deprecated(reason: \"Use getMetric(metric: \\\"network_growth\\\") instead\")\n\n  \"\"\"Fetch a project by its ID.\"\"\"\n  project(id: ID!): Project\n\n  \"\"\"\n  Returns context for a trending word and the corresponding context score.\n  \n  Arguments description:\n    * word - the word the context is requested for\n    * source - one of the following:\n      1. TELEGRAM\n      2. PROFESSIONAL_TRADERS_CHAT\n      3. REDDIT\n      4. ALL\n    * size - an integer showing how many words should be included in the top list (max 100)\n    * from - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n    * to - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n  \n  \"\"\"\n  wordContext(from: DateTime!, size: Int!, source: TrendingWordsSources!, to: DateTime!, word: String!): [WordContext]\n\n  \"\"\"Returns the user currently logged in.\"\"\"\n  currentUser: User\n\n  \"\"\"Fetch a list of all posts for given user ID.\"\"\"\n  allInsightsForUser(userId: Int!): [Post]\n\n  \"\"\"Returns MVRV(Market-Value-to-Realized-Value)\"\"\"\n  mvrvRatio(from: DateTime!, interval: interval! = \"1d\", slug: String!, to: DateTime!): [MvrvRatio] @deprecated(reason: \"Use getMetric(metric: \\\"mvrv_usd\\\") instead\")\n\n  \"\"\"\n  Fetch a list of all tags used for posts/insights. This query also returns tags that are not yet in use.\n  \"\"\"\n  allTags: [Tag]\n\n  \"\"\"\n  Fetch data bucketed by interval. The returned marketcap and volume are the sum\n  of the marketcaps and volumes of all projects for that given time interval\n  \n  \"\"\"\n  projectsListHistoryStats(from: DateTime!, interval: interval! = \"1d\", slugs: [String]!, to: DateTime!): [CombinedProjectsStats]\n\n  \"\"\"\n  Fetch historical data for a Twitter account (currently includes only Twitter followers).\n  \"\"\"\n  historyTwitterData(from: DateTime!, interval: interval = \"1d\", slug: String, ticker: String, to: DateTime!): [TwitterData]\n\n  \"\"\"\n  List available products with corresponding subscription plans.\n  \n  \"\"\"\n  productsWithPlans: [Product]\n\n  \"\"\"\n  Returns the social gainers/losers `status` and `change` for given slug.\n  Returned `status` can be one of: `GAINER`, `LOSER`, `NEWCOMER.`\n  \n  * `slug` - a string uniquely identifying a project\n  * `from` - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n  * `to` - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n  * `time_window` - the `change` time window in days. Should be between `2d` and `30d`.\n  \n  \"\"\"\n  socialGainersLosersStatus(from: DateTime!, slug: String!, timeWindow: String!, to: DateTime!): [SocialGainersLosersStatus]\n\n  \"\"\"Fetch all favourites lists for current_user.\"\"\"\n  fetchUserLists: [UserList] @deprecated(reason: \"Use `fetchWatchlists` instead\")\n\n  \"\"\"\n  Returns miner balances over time.\n  Currently only ETH is supported.\n  \n  \"\"\"\n  minersBalance(from: DateTime!, interval: interval = \"1d\", slug: String = \"ethereum\", to: DateTime!): [MinersBalance]\n\n  \"\"\"\n  Fetch share of deposits from Daily Active Addresses.\n  \n  \"\"\"\n  shareOfDeposits(from: DateTime!, interval: interval = \"1d\", slug: String!, to: DateTime!): [ShareOfDeposits]\n\n  \"\"\"\n  Returns the number of erc20 projects, currency projects and all projects\n  \"\"\"\n  projectsCount(minVolume: Int): ProjectsCount\n\n  \"\"\"Get historical trigger points\"\"\"\n  historicalTriggerPoints(cooldown: String, settings: json!): [json]\n\n  \"\"\"\n  Fetch total amount of tokens for a project that were transacted on the blockchain, grouped by interval.\n  Projects are referred to by a unique identifier (slug).\n  \n  This metric includes only on-chain volume, not volume in exchanges.\n  \n  Grouping by interval works by summing all transaction volume records in the interval.\n  \n  \"\"\"\n  transactionVolume(from: DateTime!, interval: interval = \"1d\", slug: String!, to: DateTime!): [TransactionVolume] @deprecated(reason: \"Use getMetric(metric: \\\"transaction_volume\\\") instead\")\n\n  \"\"\"\n  Top social gainers/losers returns the social volume changes of all crypto projects.\n  \n  * `from` - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n  * `to` - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n  * `status` can be one of: `ALL`, `GAINER`, `LOSER`, `NEWCOMER`\n  * `size` - count of returned projects for status\n  * `time_window` - the `change` time window in days. Should be between `2d` and `30d`.\n  \n  \"\"\"\n  topSocialGainersLosers(from: DateTime!, size: Int = 10, status: SocialGainersLosersStatusEnum!, timeWindow: String!, to: DateTime!): [TopSocialGainersLosers]\n  featuredWatchlists: [UserList]\n\n  \"\"\"\n  List all user invoice payments.\n  \n  \"\"\"\n  payments: [Payments]\n\n  \"\"\"\n  Returns the % of the social dominance a given project has over time in a given social channel.\n  \n  Arguments description:\n    * slug - a string uniquely identifying a project\n    * interval - an integer followed by one of: `m`, `h`, `d`, `w`\n    * from - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n    * to - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n    * source - the source of mention counts, one of the following:\n      1. PROFESSIONAL_TRADERS_CHAT - shows the relative social dominance of this project on the web chats where trades talk\n      2. TELEGRAM - shows the relative social dominance of this project in the telegram crypto channels\n      3. DISCORD - shows the relative social dominance of this project on discord crypto communities\n      4. REDDIT - shows the relative social dominance of this project on crypto subreddits\n      5. ALL - shows the average value of the social dominance across all sources\n  \n  \"\"\"\n  socialDominance(from: DateTime!, interval: interval! = \"1d\", slug: String!, source: SocialDominanceSources! = ALL, to: DateTime!): [SocialDominance]\n\n  \"\"\"Fetch price history for a given slug and time interval.\"\"\"\n  historyPrice(from: DateTime!, interval: interval = \"\", slug: String, ticker: String, to: DateTime!): [PricePoint]\n  featuredUserTriggers: [UserTrigger]\n\n  \"\"\"\n  Fetch the price-volume difference technical indicator for a given ticker, display currency and time period.\n  This indicator measures the difference in trend between price and volume,\n  specifically when price goes up as volume goes down.\n  \n  \"\"\"\n  priceVolumeDiff(\n    \"\"\"Currently supported currencies: USD, BTC\"\"\"\n    currency: String!\n    from: DateTime!\n    interval: interval = \"1d\"\n    size: Int = 0\n    slug: String!\n    to: DateTime!\n  ): [PriceVolumeDiff]\n\n  \"\"\"Fetch the ETH spent by all ERC20 projects within a given time period.\"\"\"\n  ethSpentByErc20Projects(from: DateTime!, to: DateTime!): Float\n  allProjectsByTicker(ticker: String!): [Project]\n\n  \"\"\"\n  Get a URL for deep-linking sanbase and telegram accounts. It carries a unique\n  random token that is associated with the user. The link leads to a telegram chat\n  with Santiment's notification bot. When the `Start` button is pressed, telegram\n  and sanbase accounts are linked and the user can receive sanbase signals in telegram.\n  \n  \"\"\"\n  getTelegramDeepLink: String\n\n  \"\"\"Returns a list of slugs of the projects that have a github link\"\"\"\n  githubAvailablesRepos: [String]\n\n  \"\"\"\n  Returns pairs of datetime and metricValue, where anomaly (metricValue outside\n  some calculated boundary) was detected for chosen metric.\n  Field `metricValue` is the value from original metric that is considered abnormal.\n  \n  Arguments description:\n  * metric - name of metric (currently supports DAILY_ACTIVE_ADDRESSES, DEV_ACTIVITY, SOCIAL_VOLUME)\n  * slug - project's slug\n  * from - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n  * to - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n  * interval - an integer followed by one of: `m`, `h`, `d`, `w`\n  \n  \"\"\"\n  metricAnomaly(from: DateTime!, interval: interval = \"1d\", metric: AnomaliesMetricsEnum!, slug: String!, to: DateTime!): [AnomalyValue]\n\n  \"\"\"\n  Fetch the insight with the given ID.\n  The user must be logged in to access all fields for the post/insight.\n  \n  \"\"\"\n  insight(id: Int!): Post\n\n  \"\"\"\n  Fetch burn rate for a project within a given time period, grouped by interval.\n  Projects are referred to by a unique identifier (slug).\n  \n  Each transaction has an equivalent burn rate record. The burn rate is calculated\n  by multiplying the number of tokens moved by the number of blocks in which they appeared.\n  Spikes in burn rate could indicate large transactions or movement of tokens that have been held for a long time.\n  \n  Grouping by interval works by summing all burn rate records in the interval.\n  \n  \"\"\"\n  burnRate(from: DateTime!, interval: interval = \"1d\", slug: String!, to: DateTime!): [BurnRateData] @deprecated(reason: \"Use getMetric(metric: \\\"age_destroyed\\\") instead\")\n  tokenAgeConsumed(from: DateTime!, interval: interval = \"1d\", slug: String!, to: DateTime!): [TokenAgeConsumedData] @deprecated(reason: \"Use getMetric(metric: \\\"age_destroyed\\\") instead\")\n\n  \"\"\"\n  Fetch open, high, low close price values for a given slug and every time interval between from-to.\n  \n  \"\"\"\n  ohlc(from: DateTime!, interval: interval = \"1d\", slug: String!, to: DateTime!): [Ohlc]\n\n  \"\"\"\n  Fetch a list of all posts/insights.\n  Optionally a list of tags can be passed so it fetches all insights with these tags.\n  It supports paginations with `page` and `page_size` args.\n  \n  \"\"\"\n  allInsights(page: Int = 1, pageSize: Int = 20, tags: [String]): [Post]\n\n  \"\"\"Fetch all ERC20 projects.\"\"\"\n  allErc20Projects(minVolume: Int, page: Int, pageSize: Int): [Project]\n\n  \"\"\"Fetch currency projects' market segments.\"\"\"\n  currenciesMarketSegments: [MarketSegment]\n\n  \"\"\"\n  Returns NVT (Network-Value-to-Transactions-Ratio\n  Daily Market Cap / Daily Transaction Volume\n  Since Daily Transaction Volume gets rather noisy and easy to manipulate\n  by transferring the same tokens through а couple of addresses repeatedly,\n  it’s not an ideal measure of a network’s economic activity.\n  That’s why we also offer another way to calculate NVT by using Daily Token Circulation.\n  This method filters out excess transactions and provides a cleaner overview of\n  a blockchain’s daily transaction throughput.\n  \n  \"\"\"\n  nvtRatio(from: DateTime!, interval: interval = \"1d\", slug: String!, to: DateTime!): [NvtRatio] @deprecated(reason: \"Use getMetric(metric: \\\"nvt\\\") and getMetric(metric: \\\"nvt_transaction_volume\\\") instead\")\n\n  \"\"\"\n  Returns lists with trending words and their corresponding trend score.\n  \n  Arguments description:\n    * source - one of the following:\n      1. TELEGRAM\n      2. PROFESSIONAL_TRADERS_CHAT\n      3. REDDIT\n      4. ALL\n    * size - an integer showing how many words should be included in the top list (max 30)\n    * hour - an integer from 0 to 23 showing the hour of the day when the calculation was executed\n    * from - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n    * to - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n  \n  \"\"\"\n  trendingWords(from: DateTime!, hour: Int!, size: Int!, source: TrendingWordsSources!, to: DateTime!): [TrendingWords]\n\n  \"\"\"Returns statistics for the data stored in elasticsearch\"\"\"\n  elasticsearchStats(from: DateTime!, to: DateTime!): ElasticsearchStats\n\n  \"\"\"\n  Fetch token velocity for a project, grouped by interval.\n  Projects are referred to by a unique identifier (slug).\n  \n  \"\"\"\n  tokenVelocity(\n    from: DateTime!\n\n    \"\"\"The interval should represent whole days, i.e. `1d`, `48h`, `1w`, etc.\"\"\"\n    interval: interval = \"1d\"\n    slug: String!\n    to: DateTime!\n  ): [TokenVelocity] @deprecated(reason: \"Use getMetric(metric: \\\"velocity\\\") instead\")\n\n  \"\"\"\n  Returns Realized value - sum of the acquisition costs of an asset located in a wallet.\n      The realized value across the whole network is computed by summing the realized values\n      of all wallets holding tokens at the moment.\n  \"\"\"\n  realizedValue(from: DateTime!, interval: interval = \"1d\", slug: String!, to: DateTime!): [RealizedValue] @deprecated(reason: \"Use getMetric(metric: \\\"realized_value_usd\\\") instead\")\n\n  \"\"\"Fetch all market segments.\"\"\"\n  allMarketSegments: [MarketSegment]\n\n  \"\"\"\n  Fetch a list of all exchange wallets.\n  This query requires you to have a plan extension or basic authentication.\n  \n  \"\"\"\n  allExchangeWallets: [Wallet]\n\n  \"\"\"\n  Fetch token age consumed in days for a project, grouped by interval.\n  Projects are referred to by a unique identifier (slug). The token age consumed\n  in days shows the average age of the tokens that were transacted for a given time period.\n  \n  This metric includes only on-chain transaction volume, not volume in exchanges.\n  \n  \"\"\"\n  averageTokenAgeConsumedInDays(from: DateTime!, interval: interval = \"1d\", slug: String!, to: DateTime!): [TokenAge]\n\n  \"\"\"Fetch all watchlists for the current user\"\"\"\n  fetchWatchlists: [UserList]\n\n  \"\"\"\n  Calculates the exchange inflow and outflow volume in usd for a given exchange in a time interval.\n  \n  \"\"\"\n  exchangeVolume(exchange: String!, from: DateTime!, to: DateTime!): [ExchangeVolume]\n\n  \"\"\"\n  Fetch a list of all posts/insights that have a given tag.\n  The user must be logged in to access all fields for the post/insight.\n  \n  \"\"\"\n  allInsightsByTag(tag: String!): [Post]\n\n  \"\"\"\n  Check coupon validity and parameters\n  \n  \"\"\"\n  getCoupon(coupon: String!): Coupon\n\n  \"\"\"\n  Returns lists with the position of a word in the list of trending words\n  over time\n  \n  * from - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n  * to - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n  * interval - a string representing at what interval the words are returned\n  * size - an integer showing how many top words should be considered in the check\n  \n  \"\"\"\n  getProjectTrendingHistory(from: DateTime!, interval: interval = \"1d\", size: Int!, slug: String!, to: DateTime!): [TrendingWordPosition]\n\n  \"\"\"\n  Returns a list of github activity for a given slug and time interval.\n  \n  Arguments description:\n    * interval - an integer followed by one of: `s`, `m`, `h`, `d` or `w`\n    * transform - one of the following:\n      1. None (default)\n      2. movingAverage\n    * movingAverageIntervalBase - used only if transform is `movingAverage`.\n      An integer followed by one of: `s`, `m`, `h`, `d` or `w`, representing time units.\n      It is used to calculate the moving avarage interval.\n  \n  \"\"\"\n  githubActivity(from: DateTime!, interval: interval = \"1d\", movingAverageIntervalBase: Int = 7, slug: String, to: DateTime!, transform: String = \"None\"): [ActivityPoint]\n  watchlistBySlug(slug: String!): UserList\n\n  \"\"\"\n  Returns the news for given word.\n  \n  Arguments description:\n    * tag - Project name, ticker or other crypto related words.\n    * from - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n    * to - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n    * size - size limit of the returned results\n  \n  \"\"\"\n  news(from: DateTime!, size: Int = 10, tag: String!, to: DateTime!): [News]\n\n  \"\"\"\n  Fetch daily active deposits for a project within a given time period.\n  Projects are referred to by a unique identifier (slug).\n  \n  \"\"\"\n  dailyActiveDeposits(from: DateTime!, interval: interval = \"1d\", slug: String!, to: DateTime!): [ActiveDeposits]\n\n  \"\"\"\n  Fetch public favourites list by list id.\n  If the list is owned by the current user then the list can be private as well.\n  This query returns either a single user list item or null.\n  \n  \"\"\"\n  userList(userListId: ID!): UserList @deprecated(reason: \"Use `watchlist` with argument `id` instead\")\n\n  \"\"\"\n  Fetch all project transparency projects. This query requires basic authentication.\n  \"\"\"\n  allProjectsProjectTransparency: [Project]\n\n  \"\"\"\n  Gets the pure dev activity of a project. Pure dev activity is the number of all events\n  excluding Comments, Issues and PR Comments\n  \n  \"\"\"\n  devActivity(from: DateTime!, interval: interval!, movingAverageIntervalBase: Int = 7, selector: GithubOrganizationsSelector, slug: String, to: DateTime!, transform: String = \"None\"): [ActivityPoint]\n\n  \"\"\"\n  Returns used Gas by a blockchain.\n  When you send tokens, interact with a contract or do anything else on the blockchain,\n  you must pay for that computation. That payment is calculated in Gas.\n  \n  \"\"\"\n  gasUsed(from: DateTime!, interval: interval = \"1d\", slug: String = \"ethereum\", to: DateTime!): [GasUsed]\n\n  \"\"\"Fetch a project by a unique identifier.\"\"\"\n  projectBySlug(slug: String!): Project\n\n  \"\"\"Fetch all public watchlists\"\"\"\n  fetchAllPublicWatchlists: [UserList]\n\n  \"\"\"\n  Returns lists with the position of a word in the list of trending words\n  over time\n  \n  * from - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n  * to - a string representation of datetime value according to the iso8601 standard, e.g. \"2018-04-16T10:02:19Z\"\n  * interval - a string representing at what interval the words are returned\n  * size - an integer showing how many top words should be considered in the check\n  \n  \"\"\"\n  getWordTrendingHistory(from: DateTime!, interval: interval = \"1d\", size: Int!, to: DateTime!, word: String!): [TrendingWordPosition]\n\n  \"\"\"\n  Return data for a given metric.\n  \n  \"\"\"\n  getMetric(metric: String!): Metric\n\n  \"\"\"Returns the selected.\"\"\"\n  getUser(selector: UserSelectorInputObject!): PublicUser\n\n  \"\"\"\n  Fetch a list of all exchange wallets on a given blockchain.\n  This query requires you to have a plan extension or basic authentication.\n  \n  \"\"\"\n  exchangeWallets(slug: String = \"ethereum\"): [Wallet]\n  getAvailableMetrics: [String]\n}\n\ntype RootSubscriptionType {\n  exchangeMarketDepth(source: String!, symbol: String): ExchangeMarketDepth\n  exchangeTrades(source: String, symbol: String): ExchangeTrade\n}\n\ntype SendCouponSuccess {\n  success: Boolean!\n}\n\ntype ShareOfDeposits {\n  activeAddresses: Int!\n  activeDeposits: Int!\n  datetime: DateTime!\n  shareOfDeposits: Float\n}\n\nenum SideEnum {\n  BUY\n  SELL\n}\n\ntype SignalHistoricalActivity {\n  payload: json!\n  trigger: Trigger!\n  triggeredAt: DateTime!\n}\n\ntype SignalHistoricalActivityPaginated {\n  activity: [SignalHistoricalActivity]\n  cursor: Cursor\n}\n\ntype SlugBalance {\n  balance: Float!\n  slug: String!\n}\n\ntype SocialDominance {\n  datetime: DateTime!\n  dominance: Float\n}\n\nenum SocialDominanceSources {\n  ALL\n  DISCORD\n  PROFESSIONAL_TRADERS_CHAT\n  REDDIT\n  TELEGRAM\n}\n\ntype SocialGainersLosersStatus {\n  change: Float!\n  datetime: DateTime!\n  status: SocialGainersLosersStatusEnum\n}\n\nenum SocialGainersLosersStatusEnum {\n  ALL\n  GAINER\n  LOSER\n  NEWCOMER\n}\n\ntype SocialVolume {\n  datetime: DateTime!\n  mentionsCount: Int\n}\n\nenum SocialVolumeType {\n  DISCORD_DISCUSSION_OVERVIEW\n  PROFESSIONAL_TRADERS_CHAT_OVERVIEW\n  TELEGRAM_CHATS_OVERVIEW\n  TELEGRAM_DISCUSSION_OVERVIEW\n}\n\ntype SourceSlugMapping {\n  slug: String!\n  source: String!\n}\n\ntype SubscriptionCancellation {\n  isScheduledForCancellation: Boolean\n  scheduledForCancellationAt: DateTime\n}\n\ntype SubscriptionPlan {\n  cancelAtPeriodEnd: Boolean\n  currentPeriodEnd: DateTime\n  id: ID\n  plan: Plan\n  status: BillingStatus\n  trialEnd: DateTime\n  user: User\n}\n\ntype Tag {\n  name: String!\n}\n\ntype TimelineEvent {\n  eventType: String!\n  insertedAt: DateTime!\n  post: Post\n  trigger: Trigger\n  user: User!\n  userList: UserList\n}\n\ntype TimelineEventsPaginated {\n  cursor: Cursor\n  events: [TimelineEvent]\n}\n\ntype TokenAge {\n  datetime: DateTime!\n  tokenAge: Float!\n}\n\ntype TokenAgeConsumedData {\n  datetime: DateTime!\n  tokenAgeConsumed: Float\n}\n\ntype TokenCirculation {\n  datetime: DateTime!\n  tokenCirculation: Float\n}\n\ntype TokenVelocity {\n  datetime: DateTime!\n  tokenVelocity: Float\n}\n\ntype TopHoldersPercentOfTotalSupply {\n  datetime: DateTime!\n  inExchanges: Float\n  inTopHoldersTotal: Float\n  outsideExchanges: Float\n}\n\ntype TopicSearch {\n  chartData: [ChartData]\n  messages: [Messages]\n}\n\nenum TopicSearchSources {\n  DISCORD\n  PROFESSIONAL_TRADERS_CHAT\n  REDDIT\n  TELEGRAM\n}\n\ntype TopSocialGainersLosers {\n  datetime: DateTime!\n  projects: [ProjectsChange]\n}\n\ntype Transaction {\n  datetime: DateTime!\n  fromAddress: Address!\n  toAddress: Address!\n  trxHash: String!\n  trxValue: Float!\n}\n\nenum TransactionType {\n  ALL\n  IN\n  OUT\n}\n\ntype TransactionVolume {\n  datetime: DateTime!\n  transactionVolume: Float\n}\n\ntype TrendingWordPosition {\n  datetime: DateTime!\n  position: Int\n}\n\ntype TrendingWords {\n  datetime: DateTime!\n  topWords: [WordWithContext]\n}\n\nenum TrendingWordsSources {\n  ALL\n  PROFESSIONAL_TRADERS_CHAT\n  REDDIT\n  TELEGRAM\n}\n\ntype Trigger {\n  cooldown: String!\n  description: String\n  iconUrl: String\n  id: Int!\n  isActive: Boolean!\n  isPublic: Boolean!\n  isRepeating: Boolean!\n  settings: json!\n  tags: [Tag]\n  title: String!\n}\n\ntype TwitterData {\n  datetime: DateTime!\n  followersCount: Int\n  slug: String\n  ticker: String\n  twitterName: String\n}\n\ntype TwitterMentionCount {\n  datetime: DateTime!\n  mentionCount: Int\n}\n\n\"\"\"\nRepresents an uploaded file.\n\n\"\"\"\nscalar Upload\n\ntype User {\n  \"\"\"\n  The total number of api calls made by the user in a given time range.\n  Counts all API calls made either with JWT or API Key authentication\n  \n  \"\"\"\n  apiCallsHistory(from: DateTime!, interval: interval = \"1d\", to: DateTime!): [ApiCallData]\n\n  \"\"\"\n  A list of api keys. They are used by providing `Authorization` header to the\n  HTTP request with the value `Apikey <apikey>` (case sensitive). To generate\n  or revoke api keys check the `generateApikey` and `revokeApikey` mutations.\n  \n  Using an apikey gives access to the queries, but not to the mutations. Every\n  api key has the same SAN balance and subsription as the whole account\n  \n  \"\"\"\n  apikeys: [String]\n  avatarUrl: String\n  consentId: String\n  email: String\n\n  \"\"\"\n  A list of ethereum addresses owned by the user. A special message needs to be\n  signed in order to be confirmed that the address belongs to the user.\n  The combined SAN balance of the addresses is used for the `san_balance`\n  \n  \"\"\"\n  ethAccounts: [EthAccount]\n  firstLogin: Boolean\n  followers: FollowerData\n  following: FollowerData\n  id: ID!\n  insights: [Post]\n  marketingAccepted: Boolean\n  permissions: AccessLevel\n  privacyPolicyAccepted: Boolean\n  sanBalance: Float\n  settings: UserSettings\n  subscriptions: [SubscriptionPlan]\n  triggers: [Trigger]\n  username: String\n}\n\ntype UserList {\n  color: ColorEnum\n  function: json\n  historicalStats(from: DateTime!, interval: interval = \"1d\", to: DateTime!): [CombinedProjectsStats]\n  id: ID!\n  insertedAt: NaiveDateTime!\n  isMonitored: Boolean\n  isPublic: Boolean\n  listItems: [ListItem]\n  name: String!\n  settings: WatchlistSettings\n  slug: String\n  stats: WatchlistStats\n  updatedAt: NaiveDateTime!\n  user: PostAuthor!\n}\n\ninput UserSelectorInputObject {\n  email: String\n  id: ID\n  username: String\n}\n\ntype UserSettings {\n  hasTelegramConnected: Boolean\n  hidePrivacyData: Boolean\n  isBetaMode: Boolean\n  newsletterSubscription: NewsletterSubscriptionType\n  pageSize: Int\n  signalNotifyEmail: Boolean\n  signalNotifyTelegram: Boolean\n  tableColumns: json\n  theme: String\n}\n\ninput UserSettingsInputObject {\n  hasTelegramConnected: Boolean\n  hidePrivacyData: Boolean\n  isBetaMode: Boolean\n  newsletterSubscription: NewsletterSubscriptionType\n  pageSize: Int\n  signalNotifyEmail: Boolean\n  signalNotifyTelegram: Boolean\n  tableColumns: json\n  theme: String\n}\n\ntype UserTrigger {\n  trigger: Trigger\n  userId: Int\n}\n\ntype Vote {\n  totalSanVotes: Int!\n  totalVotes: Int!\n}\n\ntype Wallet {\n  address: String!\n  infrastructure: Infrastructure\n  isDex: Boolean\n  name: String!\n}\n\ntype WatchlistSettings {\n  pageSize: Int\n  tableColumns: json\n  timeWindow: String\n}\n\ninput WatchlistSettingsInputObject {\n  pageSize: Int\n  tableColumns: json\n  timeWindow: String\n}\n\ntype WatchlistStats {\n  projectsCount: Int\n  trendingNames: [String]\n  trendingProjects: [Project]\n  trendingSlugs: [String]\n  trendingTickers: [String]\n}\n\ntype WordContext {\n  score: Float!\n  word: String!\n}\n\ntype WordTrendScore {\n  datetime: DateTime!\n  score: Float!\n  source: TrendingWordsSources\n}\n\ntype WordWithContext {\n  context: [WordContext]\n  score: Float\n  word: String\n}\n"}